    private void start(int port) {
        try (ServerSocket serverSocket = new ServerSocket(port)) {
            jdbc jdbc_el = new jdbc();
            //System.out.println("Server started!");
            log.info("Server started!");
            while (true) {
                Socket socket = serverSocket.accept();
                DataInputStream inp = new DataInputStream(socket.getInputStream());
                DataOutputStream out = new DataOutputStream(socket.getOutputStream());

                //System.out.println("New client connected!");
                log.info("New client connected!");
                try {
                    String inputMessage = inp.readUTF();
                    if (checkForAuthMessage(socket, out, inputMessage)) continue;
                    if (checkForChangeNicknameMessage(jdbc_el, inputMessage)) continue;
                    if (checkForRegistrationMessage(jdbc_el, socket, out, inputMessage)) continue;

                    log.warn("Incorrect authorization/registration message {}%n", inputMessage);
                    out.writeUTF("/auth fails");
                    out.flush();
                    socket.close();

                } catch (IOException e) {
                    e.printStackTrace();
                    log.error("Data reading from input stream has failed", e);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
            log.error("Server socket has failed", e);
        } finally {
            executorService.shutdown();
        }
    }

    private boolean checkForRegistrationMessage(jdbc jdbc_el, Socket socket, DataOutputStream out, String inputMessage) throws IOException {
        Matcher matcher;

        matcher = Constants.REGISTRATION_PATTERN_FOR_READ.matcher(inputMessage);
        if (matcher.matches()) {
            String username = matcher.group(1);
            String password = matcher.group(2);
            try {
                jdbc_el.RegistrateUser(username, password);
                out.writeUTF("/reg successful");
                out.flush();
                //System.out.printf("Registration for user %s successful%n", username);
                log.info("Registration for user {} successful", username);
                broadcastUserConnected(username);//сообщим всем пользователям о появлении нового клиента online
                ClientHandler newUserClientHandler = new ClientHandler(username, socket, this, executorService);
                clientHandlerMap.put(username, newUserClientHandler);
                //сообщим новому клиенту список online-пользователей
                sendOnlineUsers(newUserClientHandler);
            } catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
            } catch (NonuniqueUserRegistrationException e) {
                //System.out.printf("Registration for user %s failed, user with the same name already exists%n", username);
                log.warn("Registration for user {} failed, user with the same name already exists", username);
                out.writeUTF("/reg fails");
                out.flush();
                socket.close();
            }
            return true;
        }
        return false;
    }

    private boolean checkForChangeNicknameMessage(jdbc jdbc_el, String inputMessage) {
        Matcher matcher;

        matcher = Constants.NICKNAME_PATTERN_FOR_READ.matcher(inputMessage);
        if (matcher.matches()) {
            String username = matcher.group(1);
            String nickname = matcher.group(2);
            try {
                jdbc_el.changeNickname(username, nickname);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    private boolean checkForAuthMessage(Socket socket, DataOutputStream out, String inputMessage) throws IOException {
        Matcher matcher = Constants.AUTH_PATTERN_FOR_READ.matcher(inputMessage);
        if (matcher.matches()) {
            String username = matcher.group(1);
            String password = matcher.group(2);
            if (authService.authUser(username, password)) {
                //сообщим всем пользователям о появлении нового клиента online
                broadcastUserConnected(username);
                ClientHandler newUserClientHandler = new ClientHandler(username, socket, this, executorService);
                clientHandlerMap.put(username, newUserClientHandler);
                out.writeUTF("/auth successful");
                out.flush();
                //System.out.printf("Authorization for user %s successful%n", username);
                log.info("Authorization for user {} successful", username);
                //сообщим новому клиенту список online-пользователей
                sendOnlineUsers(newUserClientHandler);
            } else {
                // System.out.printf("Authorization for user %s failed%n", username);
                log.info("Authorization for user {} failed", username);
                out.writeUTF("/auth fails");
                out.flush();
                socket.close();
            }
            return true;
        }
        return false;
    }